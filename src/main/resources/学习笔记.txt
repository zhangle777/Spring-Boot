1.https转换成http请求的时候，没有指定方法转换。所有的post请求都自动转换为get请求了。所以导致出现Request method 'GET' not supported。

2.关于provisional headers are shown的报错。导致接口无法正常请求。原因是如果使用的是谷歌浏览器。那么就是你安装了广告拦截器的插件导致的！因为可能你的接口中含有铭感词汇。接口被拦截了。比如我之前的一个接口是http://xxx.com/info?bannerId=1这种，因为banner是一个敏感词汇，可能它本身就含有广告的意思，导致被拦截了。所以后面我就吧这个参数改成了id就可以了。或者直接点击取消拦截也可以解决这个问题。

-javaagent:E:\PyCharm2018.3.4\bin\JetbrainsIdesCrack-3.4-release-enc.jar

git rebase --abort

default 不能修饰变量

@RequestLogging 用于忽略请求超时时间等

-Dorg.gradle.project.P=test

本地gradle缓存清除  C:\Users\zhangle\.gradle\caches

无法生成接口文档：创建application-test.yml   
autodoc:
  gen:
    enable: @autodoc.enable@
    version: @autodoc.version@
    table-prefix: @generator.tablePrefix@
    data-type: @generator.dataType@

select * from information_schema.innodb_trx 锁库查询


spring 事务机制：默认情况下只回滚运行时异常！！

java 标识符：只能有 字母、数字、下划线、美元符($) 不能以数字开头
java重写：重写要求方法名和方法参数必须相同，返回值可以是被重写方法的子类，访问修饰符不能比被重写方法小。抛出异常不能比被重写方法小。（两同两大一小）
java重载：同一个类中，有多个方法名称相同，但参数类型不同的方法。就叫重载。重载跟方法的返回值和访问修饰符没有关系。
位运算：
	补码~：二进制先取反再加一。
	位与&：两个二进制值，相应位都为1时则为1。否则为0(同一为一)
	位或|：两个二进制值，相应位只要存在1则为1。否则为0（有一为一）
	位异或^：两个二进制值，相应位不相同时则为1。否则为0（不同为一）
	左移<<：运算对象全部向左移动若干位，左边的二进制丢弃，右边补0
	带符号右移>>：运算对象全部向右移动若干位，右边的二进制丢弃。正数左边补0，负数就补1
	无符号右移>>>：运算对象全部向右移动若干位，右边的二进制丢弃。左边统统补0
HashMap：jdk1.8之前采用（数组+连表）的数据结构。1.8之后则采用（数组+链表+红黑树）数据结构。继承AbstractMap实现Map、Cloneable、Serializable等接口。
	实现的是浅拷贝。即改变原始对象，拷贝对象也会发生改变.

HashMap的put()方法原理(jdk1.8)：
	1.首先获取key的hashCode，然后将hashcode值右移16位。然后再将右移后的值与原hashcode值异或运算，得到最终的hashcode。
		(key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16)，这样做称为扰动计算。在jdk1.7时，一共做了4次扰动计算。这种计算方式可以很大程度减少碰撞几率
	2.初始化数组表table的容量。容量都是2的次幂。默认是16，即new HashMap()操作。
	3.通过key的hashCode查询在数组中的位置，即下标i=(n-1)&hash,使用位与运算等同于取模运算hash%n。但效率高于后者
	4.如果第三步数组 table[i]中为null 则直接在该下标处添加。如果table[i]中不为null。已存在时。则判断key的hash值是否等于table[i]的hash值和key是否等于table[i]的key。即
		p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k))) 如果都相等，则直接覆盖该位置的数据。而如果不相等时，再判断table[i]是否为树节点。
	  如果是，直接添加树节点。如果不是树节点，则遍历链表，并找到table[i]的下节点，如果没有下节点，则直接将当前节点添加。并判断循环的次数（默认是8次）是否满足红黑树结构，
	  如果满足则会将链表结构转为红黑树结构。如果已有下节点，则判断下节点的hash是否相等，如果相等则直接覆盖。并返回上级节点。即table[i]。
	5.最后结构修改，判断是否需要扩容。HashMap每次扩容为原来的2倍。

HashMap解决hash冲突的方法为链地址法。

equlas相等则hashcode一定相等。hashcode相等但equlas不一定相等

HashMap与HashTable的区别：
	1.安全性：HashMap线程不安全，HashTable为线程安全
	2.继承链：HashMap继承AbstractMap，HashTable继承Dictionary。但都实现了Map以及cloneable、Serializable接口。
	3.存空值：HaspMap允许key或value为null，HashTable不允许key或value为null
	4.容量与扩容：HashMap默认容量为16，每次扩容为原来的2n，HashTable默认容量为11，每次扩容为原来的2n+1;

Math.ceil()：表示向上取整，返回不小于它的最小整数。返回值为double类型。注意：如果有符号。则符号不变。 
	例：Math.ceil(-0.5) = -0.0
Math.floor()：表示向下取整，返回不大于它的最大整数，返回值为double类型
Math.round()：表示四舍五入，算法为Math.floor(a+0.5),即将原值加0.5再向下取整。返回值为int或long型。

静态方法可以被继承，但不能被重写，不能有@Override注解。private修饰的方法不能被继承。

getMethod():获取当前类及所有继承的父类的public修饰的方法。仅包括public
getDeclaredMethod():获取当前类的所有方法，包括public/private/protected/default修饰的方法。

StringBuffer类与StringBuilder类详解：
	StringBuffer和StringBuilder都继承与AbstrctStringBuilder类。
	StringBuffer和StringBuilder的字符序列默认容量都为16。即初始化长度=参数长度+16。扩容规则为2n+2。(因为都是调用父类的扩容规则)
	StringBuffer和StringBuilder的构造器都是4个。
	capacity()方法返回字符串的容量大小
	length()方法返回字符串长度大小。
	StringBuffer重写了很多父类的方法。并且添加了Synchornized关键字来保持同步，牺牲了一定效率。在多线程环境下是线程安全的。
	StringBuilder则是线程不安全的。效率高于StringBuffer。

default关键字只能在接口中使用，并且只能修饰方法。不能修饰变量。

Object.getClass()方法返回的是当前运行类的类对象。super.getClass()方法如果当前类的父类没有重写getClass()方法，则表示调用的Object.getClass()方法，依然返回当前类的类对象

定义在同一个包内的类可以不经过impor而直接引用

面向对象设计原则：
	开闭原则：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求
	里氏替换原则：子类可以扩展父类的功能，但不能改变父类原有的功能，也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法
	依赖倒置原则：高层模块不应该依赖底层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：面向接口编程，不要面向实现编程
		      以降低类间的耦合性。
	单一职责原则：
	接口隔离原则：
	

spring cloud 重要组件作用
	Eureka：服务发现与注册，分为Eureka Client和Eureka Service（注册中心）。每个服务都会作为Eureka Client被注册在Eureka Service中，
	              同样。Eureka Client反过来可以拉取Eureka Service注册表。获取其他服务的信息。
	Ribbon：不同服务间发起请求的时候，是基于Ribbon来做的负载均衡，从一个服务的多台机器中选择一台。它采用的是Round Robin轮询算法。
	Feign：服务间的相互调用基于Feign的动态代理机制，根据@Feign、@RequestMapping等注解构建请求和服务器地址，然后发送请求，解析响应
	Hystrix：发起请求是通过Hystrix的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务器雪崩的问题。
	Zuul：如果前端、移动端要调用后端系统，统一从Zuul网关进入，由Zuul网关转发请求给对应的服务。

java采用unicode编码，两个字节表示一个字符，因此char型在java中占两个字节。char输出是ACSII编码
对char类型变量赋数值时，会自动转换成ASCII编码输出。char类型字面量进行运算时，会先自动转换为ASCII数值，再运算，最后再转为ASCII字符。
	
关于乱码问题解决方案：
	1.使用浏览器与服务器编码相匹配。
	2.tomcat默认的编码是ISO-8859-1。
	3.servlet中可以主动设置编码格式，来进行数据读取

java中原子操作包括：
	1.除了long和double之外的基本数据类型赋值操作（在32位的操作系统中，64位的long和double变量会被JVM当作两个分离的32位来操作。所以不具备原子性）
	2.所有引用的赋值操作
	3.java.concurrent.Atomic.*包中的所有类的一切操作

Java内存模型：
	java内存模型规定所有变量（不包括线程私有变量和方法参数）都存储在主内存中，每条线程都有自己的工作内存，
	线程的工作内存中保存了被该线程使用到的主内存变量的拷贝副本，线程对变量的所有操作（读写）都必须在自己的工作内存中进行，不能直接读取主内存。线程的变量值传递由主内存来完成

并发的三个概念： 
	1.原子性：即一个或多个操作要么全部执行并且执行过程中不会被打断，要么都不执行。只有基本数据类型读写操作具有原子性（不包含long和double）。
		可使用synchornized来保证数据的原子性
	2.可见性：多个线程访问同一个变量时，一个线程改变了这个变量的值，其他线程能够立即看到修改后最新的值
		volatile：保证了新值能立即同步回主内存，每次刷新前也能立即从主内存刷新。volatile保证了可见性
		synchornized同步块的可见性规定：对一个变量执行unlock操作前，必须把此变量同步回主内存。
		final可见性：被final修饰的字段在构造器中一旦被初始化完成，不能被修改，并且构造器没有把this的引用传递出去
			那么其他线程则能看到该变量的值。
	3.有序性：程序执行的顺序按代码的先后顺序执行。
		volatile：本身含有禁止指令重排
		synchornized（规则）：由一个变量在同一时刻只允许一条线程对其lock操作
	synchronized是一种悲观锁策略。
指令重排序：
	1.编译器重排序：编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序
	2.处理器重排序：如果不存在数据依赖性。处理器可以改变语句对应的机器指令的执行顺序，CPU在指令重排序时会考虑指令之间的依赖性，
	   如果指令2必须依赖指令1的结果，那么CPU会保证指令1在指令2之前执行。
	注：指令重排序不保证程序中各个语句的执行顺序和代码一致，但会保证程序最终的执行结果和代码顺序执行的结果一致

volatile关键字：在多线程环境下，如果某一个线程修改了volatile修饰的变量，那么会立即同步到主内存中，其他线程会立即看到修改后的值（因为所有线程都有主内存变量的拷贝）
	        可以保证在多线程中数据域的及时可见性、有序性（禁止指令重排）、但不能保证原子性。

java Atomic类：在多线程的环境下。使用int i = 0;i++这样的操作是不安全的，因为这种操作被Jvm转为了多条指令执行，很容易呗其他线程打断。不是原子性操作。
	        那么一般会使用Synchornized关键字来同步保证其原子性，但是由于Synchornized采用悲观锁策略。如果线程A正在执行操作，那么其他下次线程则会
	        全部阻塞（在没拿到对象锁之前）。这在高并发情况下性能会下降。而Atomic类则采用CAS无锁操作来完成的。
	        比如在AtomicInteger类中的incrementAndGet()方法（自增）会调用Unsafe.compareAndSwapInt()方法来完成。诸如此类还有很多方法。
	        但是Atomic类也有一些缺点：1.常有ABA问题。2.自旋问题：atomic类会多次尝试CAS操作直至成功或失败，这个过程叫自旋，自旋操作不会让线程阻塞，会一直循环操作。长期占用cpu资源。
	         在某些场景下会存在cpu负担。在jdk1.8之后出现了LongAdder类它采用分段锁机制解决资源竞争的问题。

关于CAS：CAS技术又叫比较与交换技术（Compare And Swap）用于实现多线程同步的原子指令。他是操作系统的底层的指令。

ThreaLocal：每个线程都可以有自己独立的变量实例。不受其他线程的影响

读/写锁：读操作可以多个线程同时执行，共享访问，而写操作必须线程互斥访问。也就是说只能有一个线程去操作，其他线程阻塞

阻塞队列：add()                   添加一个元素                            如果队列满了，则抛出了IllegalStateException异常
	put()                    添加一个元素                            如果队列满了，则阻塞
	offer()                  添加一个元素并返回true            如果队列满了，则返回false
	element()(查询)     返回头元素，                            如果队列为空，则抛出NoSuchElementException异常
	peek()(查询)          返回队列的头元素                     如果队列为空，则返回null
	poll()                    移出并返回头元素                     如果队列为空，则返回null
	take()                   移出并返回头元素                     如果队列为空，则阻塞
	remove()              移出并返回头元素                     如果队列为空，则抛出NoSuchElementException异常

常见队列：
	LinkedBlockingQueue：一种有界（无界：默认最大Integer.MAX_VALUE）的阻塞队列。它是先进先出(IFOF)队列。它采用单链表的数据结构。不支持插入null
		内部维护两把锁，take锁和put锁。当在put元素的时候，如果队列满了，则会进入阻塞状态。而如果队列没满，在添加一个元素后。会唤醒其他进入阻塞状态的put锁线程。
		在最后，还会唤醒一个取锁上的一个阻塞线程。
	ArrayBlockingQueue：一种有界队列，先进先出(IFOF)，必须指定长度，采用数组。不支持插入null，内部维护了一把锁。效率比linkedBlockingQueue低。
	PriorityBlockingQueue：无界队列，按元素优先级来入队/出队。添加的对象必须是comparable对象或者添加一个比较器。默认长度为11，最大长度为Integer.MAX_VALUE-8(减8是因为有些VM实现在数组头有些内容)，
		它采用平衡二叉树堆算法的实现。不支持插入null。
	DelayQueue：一种无界队列，实现延迟获取元素。
Callable:
	
